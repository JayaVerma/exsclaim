<div style="display:none;">&nbsp;</div>
<link href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/themes/smoothness/jquery-ui.css" rel="stylesheet" /><script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script><script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.js"></script>
<div style="display:inline-block;vertical-align:top;">
<h3>Draw Bounding Boxes around all objects of interest in the image and then either label them or transcribe their text</h3>
<div id="instructions" style="display:none">
<p><b>Primary Task -- Draw bouding boxes:</b> Select which type of object you are labeling, then draw a box around each instance of that object. Finally complete the the object's classification, either by selecting a type or transcribing the text within your box. </p>
<p>The objects of interest are: </p>
    <ul>
        <li> <b>Master Image:</b> The global figure that the master subfigure label is referencing. Can be a <a href="https://drive.google.com/file/d/1v_t-cLlyHedL4vaSUJl8MKdDIEz0nZXC/view?usp=sharing" target="_blank">single image</a> or <a href="https://drive.google.com/file/d/1abF_PZPswWcmQ0D0R1rwtc8Nm8R46Hsg/view?usp=sharing" target="blank">multiple</a>. </li>
        <li> <b>Dependent Image:</b> A “sub” image contained within the bounds of its master image that is <em>not</em> integrated into the content of another image. Usually when one label is referring to multiple subfigures, they are dependent images.</li>
        <li> <b>Inset Image:</b> A “sub” image contained within the bounds of its master image that <em>is</em> integrated (inset) into the content another image. <a href="https://drive.google.com/open?id=1xlMSqxBRzr3LvhCOFl_eHqoFfLHe82Ma" target="_blank">Example</a></li>
        <li> <b>Subfigure Label:</b> A classifying name (most often a single letter or number) applying to a master image or dependent image within the figure.</li>
        <li> <b>Scale Bar Label:</b> The length associated with the scale bar line provided (i.e. 10 nm).</li>
        <li> <b>Scale Bar Line:</b> The bar or line providing a visual indication of size in the image. Be as precise as possible when drawing this bounding box being careful not to clip portions of the scale bar.</li>
    </ul>
<p><b>Secondary Task #1 -- Classify Images:</b> If the object of interest is an image, you will be prompted to classify it as on of the following (after you complete the bounding box you can just select the first letter of the classification on your keyboard):</p>
    <ul>
		<li> <b>Parent:</b> Use this to refer to an image that contains multiple dependent images (i.e. the content cannot be described by a single class because the master itself contains several dependents). If the image in question is a master image with an inset, Do <b>NOT</b> label this as a parent. This master itself can be categorized according to one of the other classes provided. </li>
        <li> <b>Microscopy:</b> A digital image that was obtained from a microscope (has appearance of an object and often has a scale bar label that contains a “real space” measurement unit such as mm, &#956m, nm, &#8491 etc.)</li>
        <li> <b>Diffraction:</b> A digital image that was obtained from a microscope (has a grid-like pattern of geometrically arranged bright dots and often contains a “reciprocal space” measurement such as 1/nm, 1/&#8491, etc, where the familiar unit appears in the denominator of a fraction.)</li>
        <li> <b>Graph:</b> A diagram showing the relation between variable quantities, typically of two variables, each measured along one of a pair of axes at right angles.</li>
        <li> <b>Illustration</b> A drawing (hand-drawn or digital rendering) of some object or process. Could be a schematic outlining a process, or a visualization of an atomic structure contained in the image.</li>
        <li> <b>Basic Photo: </b> An explicit photograph taken by an optical camera (can be a picture of a laboratory apparatus or of a person)</li>
        <li> <b>Unclear: </b> Reserve this for images where their appropriate class is unclear.</li>
    </ul>
<p><b>Secondary Task #2 -- Transcribe Text:</b> If the object of interest is a Subfigure Label or Scale Bar Label, please enter in the text exactly as it appears. <b>For scale bar labels, you may enter &#956m as um and &#8491 as A.</b> </p>
<p><b> Interacting with the interface: </b> To begin drawing a box, double click. The location of your double click will be one corner of the box. When you have moved your cursor to the other corner of the box, single click. To move a previously drawn box, press down of its border and move it to where you would like it to go and then release the mouse. </p>
<p><b>IMPORTANT: It is better to put too much in a bounding box than too little. If most of your boxes exclude parts of the object, we will reject you.</b></p> 
<p> If the image is of terrible quality, draw one scalebar label box anywhere and enter text 'SKIP'</p>
<p><b>Please enter text only for subfigure labels and scalebar labels EXACTLY as it appears</b> (include parenthesis if present, "10 nm" not "10nm", etc.).</p>
<p><b>Most subfigures are master images.</b> A dependent image is typically when one subfigure label refers to multiple subfigures. The entire image will only be a master image if there is only one subfigure or if there are no labels. </p>
 
<p> Full instructions with sample labeling session <a href="https://drive.google.com/file/d/1423RJVS2zQw3arCQNRvMdyS5UboH4bDU/view?usp=sharing" target="_blank">here</a></p>
</div>

<ul id="short_instructions">
	<li>Primary Task: Draw bounding boxes around objects of interest (Master Image, Dependent Image, Inset Image, Subfigure Label, Scale Bar Label, Scale Bar Line)</li>
	<li>Secondary Task #1: Classify images as one of: Parent, Microscopy, Diffraction, Graph, Illustration, Basic Photo, Unclear</li>
	<li>Secondary Task #2: Enter in the text for Scale Bar Labels and Subfigure Labels <b>EXACTLY</b> as it appears except you may enter &#956m as um and &#8491 as A. (this means include spaces and parenthesis!) </li>
    <li><b> Interacting with the interface: </b> To begin drawing a box, double click. The location of your double click will be one corner of the box. When you have moved your cursor to the other corner of the box, single click. To move a previously drawn box, press down of its border and move it to where you would like it to go and then release the mouse. </p>
    <li><b>IMPORTANT: It is better to put too much in a bounding box than too little. If most of your boxes exclude parts of the object, we will reject you.</b></li> 
    <li> If the image is of terrible quality, draw one scalebar label box anywhere and enter text 'SKIP'</li>
    <li><b>Most subfigures are master images.</b> A dependent image is typically when one subfigure label refers to multiple subfigures. The entire image will only be a master image if there is only one subfigure or if there are no labels. </li>
    <li> Full instructions with sample labeling session <a href="https://drive.google.com/file/d/1423RJVS2zQw3arCQNRvMdyS5UboH4bDU/view?usp=sharing" target="_blank">here</a> Example labeled images available <a href="https://docs.google.com/document/d/1rZp7liuTEvq9J7OuX9ujOB1XuMBoWU4z1N628Pu7yRs/edit?usp=sharing" target="_blank">here</a></li>
</ul>
<input type="checkbox" name="agreement" value="agree" id="agreement"> I have read <a href="https://drive.google.com/file/d/0ByAEGqveH4rRcUNiUnZuYXFLOG5LN2poWGYzUzEzZG1ySWlJ/view" target="_blank">the user agreement</a> and I understand that if I do not follow the instructions, my assignment will be rejected. </input>

<div>
	<button type="button" onclick="document.getElementById('instructions').style.display='none'; document.getElementById('short_instructions').style.display='block'">Hide Longer Instructions</button>
	<button type="button" onclick="document.getElementById('instructions').style.display='block'; document.getElementById('short_instructions').style.display='none'">Show Longer Instructions</button>

<div id="bbox_annotator" style="display:inline-block">&nbsp;</div><p/><p/>

<div style="display:inline-block;vertical-align:top;">
  <div>
    <span>Select what object you are identifying: </span>
    <button type="button" style="border: 1px solid #FF0000" id="master">Master Image</button>
	<button type="button" style="border: 1px solid #0000FF" id="dependent">Dependent Image</button>
	<button type="button" style="border: 1px solid #9900FF" id="inset">Inset Image</button>
	<button type="button" style="border: 1px solid #00A700" id="subfigure_label">Subfigure Label</button>
	<button type="button" style="border: 1px solid #FFFF00" id="scale_bar_label">Scale Bar Label</button>
	<button type="button" style="border: 1px solid #FF9900" id="scale_bar">Scale Bar</button>
  </div>
  <div>
      <button type="button" id="hide_labels">Hide Labels</button>
      <button type="button" id="show_labels">Show Labels</button>
      <button type="button" id="hide_boxes">Hide Boxes</button>
      <button type="button" id="show_boxes">Show Boxes</button>
  </div>


<p id="button_paragraph"><input id="annotation_data" name="annotation_data" type="hidden" /> <input id="reset_button" type="reset" /></p>
</div>
</div>


<script type="text/javascript">
(function() {
  var BBoxSelector;

BBoxSelector = (function() {

function BBoxSelector(image_frame, options) {
      if (options == null) {
        options = {};
      }
      options.input_method || (options.input_method = "text");
      this.image_frame = image_frame;
      this.border_width = options.border_width || 2;
      this.selector = $('<div class="bbox_selector"></div>');
      this.selector.css({
        "border": this.border_width + "px dotted rgb(0,0,0)",
        "position": "absolute"
      });
      this.image_frame.append(this.selector);
      this.selector.css({
        "border-width": this.border_width
      });
      this.selector.hide();
      this.create_label_box(options);
    }

BBoxSelector.prototype.create_label_box = function(options) {
      var label, _i, _len, _ref;
      options.labels || (options.labels = ["object"]);
      this.label_box = $('<div class="label_box"></div>');
      this.label_box.css({
        "position": "absolute"
      });
      this.label_box.css({
        "z-index": "1000"
      });

      this.image_frame.append(this.label_box);
      switch (options.input_method) {
        case 'select':
          if (typeof options.labels === "string") {
            options.labels = [options.labels];
          }
          this.label_input = $('<select class="label_input" name="label"></select>');
          this.label_box.append(this.label_input);
          this.label_input.append($('<option value>choose an item</option>'));
          _ref = options.labels;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            label = _ref[_i];
            this.label_input.append('<option value="' + label + '">' + label + '</option>');
          }
          this.label_input.change(function(e) {
            return this.blur();
          });
          break;
        case 'text':
          if (typeof options.labels === "string") {
            options.labels = [options.labels];
          }
          this.label_input = $('<input class="label_input" name="label" ' + 'type="text" value>');
          this.label_box.append(this.label_input);
          this.label_input.autocomplete({
            source: options.labels || [''],
            autoFocus: true
          });
          break;
        case 'fixed':
          if ($.isArray(options.labels)) {
            options.labels = options.labels[0];
          }
          this.label_input = $('<input class="label_input" name="label" type="text">');
          this.label_box.append(this.label_input);
          this.label_input.val(options.labels);
          break;
        default:
          throw 'Invalid label_input parameter: ' + options.input_method;
      }
      return this.label_box.hide();
    };

BBoxSelector.prototype.crop = function(pageX, pageY) {
      var point;
      return point = {
        x: Math.min(Math.max(Math.round(pageX - this.image_frame.offset().left), 0), Math.round(this.image_frame.width() - 1)),
        y: Math.min(Math.max(Math.round(pageY - this.image_frame.offset().top), 0), Math.round(this.image_frame.height() - 1))
      };
    };

BBoxSelector.prototype.start = function(pageX, pageY) {
      this.pointer = this.crop(pageX, pageY);
      this.offset = this.pointer;
      this.refresh();
      this.selector.show();
      $('body').css('cursor', 'crosshair');
      return document.onselectstart = function() {
        return false;
      };
    };

BBoxSelector.prototype.update_rectangle = function(pageX, pageY) {
      this.pointer = this.crop(pageX, pageY);
      return this.refresh();
    };
    
BBoxSelector.prototype.input_label = function(options) {
      $('body').css('cursor', 'default');
      document.onselectstart = function() {
        console.log("selection started");
        return true;
      };
      this.label_box.show();
      return this.label_input.focus();
    };

BBoxSelector.prototype.finish = function(options) {
      var data;
      this.label_box.hide();
      this.selector.hide();
      data = this.rectangle();
	  data.functionality = options.functionality || "undeclared";
	  data.color = options.color;
      data.label = $.trim(this.label_input.val());
      if (options.input_method !== 'fixed') {
         this.label_input.val('');
      } else {
	      this.label_input.val('scale bar');
	  }
      return data;
    };

BBoxSelector.prototype.rectangle = function() {
      var rect, x1, x2, y1, y2;
      x1 = Math.min(this.offset.x, this.pointer.x);
      y1 = Math.min(this.offset.y, this.pointer.y);
      x2 = Math.max(this.offset.x, this.pointer.x);
      y2 = Math.max(this.offset.y, this.pointer.y);
      return rect = {
        left: x1,
        top: y1,
        width: x2 - x1 + 1,
        height: y2 - y1 + 1
      };
    };
    
BBoxSelector.prototype.move_rectangle = function(x_start, y_start, pageX, pageY) {
    var rect;
    rect = this.rectangle();
    rect.left = rect.left + (pageX - x_start);
    rect.top = rect.top + + (pageY - y_start);
      this.selector.css({
        left: (rect.left - this.border_width) + 'px',
        top: (rect.top - this.border_width) + 'px',
        width: rect.width + 'px',
        height: rect.height + 'px'
      });
      return this.label_box.css({
        left: (rect.left - this.border_width) + 'px',
        top: (rect.top + rect.height + this.border_width) + 'px'
      });
    };

BBoxSelector.prototype.refresh = function() {
      var rect;
      rect = this.rectangle();
      this.selector.css({
        left: (rect.left - this.border_width) + 'px',
        top: (rect.top - this.border_width) + 'px',
        width: rect.width + 'px',
        height: rect.height + 'px'
      });
      return this.label_box.css({
        left: (rect.left - this.border_width) + 'px',
        top: (rect.top + rect.height + this.border_width) + 'px'
      });
    };

BBoxSelector.prototype.get_input_element = function() {
      return this.label_input;
    };

return BBoxSelector;

})();

this.BBoxAnnotator = (function() {

function BBoxAnnotator(options) {
      var annotator, image_element;
      annotator = this;
      this.functionality = options.functionality || "undeclared";
	  this.color = options.color || "rgb(0,0,0)";
      this.annotator_element = $(options.id || "#bbox_annotator");
      this.border_width = options.border_width || 2;
      this.show_label = options.show_label || (options.input_method !== "fixed");
      this.image_frame = $('<div class="image_frame"></div>');
      this.annotator_element.append(this.image_frame);
      image_element = new Image();
      image_element.src = options.url;
      image_element.onload = function() {
        options.width || (options.width = image_element.width);
        options.height || (options.height = image_element.height);
        annotator.annotator_element.css({
          "width": (options.width + annotator.border_width * 2) + 'px',
          "height": (options.height + annotator.border_width * 2) + 'px',
          "cursor": "crosshair"
        });
        annotator.image_frame.css({
          "background-image": "url('" + image_element.src + "')",
          "width": options.width + "px",
          "height": options.height + "px",
          "position": "relative",
          "margin" : "2px 0px 2px 0px"
        });
        annotator.selector = new BBoxSelector(annotator.image_frame, options);
        return annotator.initialize_events(annotator.selector, options);
      };
      image_element.onerror = function() {
        return annotator.annotator_element.text("Invalid image URL: " + options.url);
      };
      this.entries = [];
      this.onchange = options.onchange;
    }

BBoxAnnotator.prototype.initialize_events = function(selector, options) {
	  this.functionality = options.functionality;
      var annotator, status;
      status = 'free';
      this.hit_menuitem = false;
      annotator = this;
      this.annotator_element.mousedown(function(e) {
        if (!annotator.hit_menuitem) {
          switch (status) {
            case 'free':
<<<<<<< HEAD
<<<<<<< HEAD
            case 'input':
              if (status === 'input') {
                selector.get_input_element().blur();
              }
<!--               if (e.which === 1) {
=======
=======
>>>>>>> bb963a4... Merge branch 'master' of gitlab.com:MaterialEyes/exsclaim

              if (status === 'input') {
                selector.get_input_element().blur();
              }
              if (e.which === 1) {
<<<<<<< HEAD
>>>>>>> 1fc2e08... Updated xml label with margin
=======
>>>>>>> bb963a4... Merge branch 'master' of gitlab.com:MaterialEyes/exsclaim
                selector.start(e.pageX, e.pageY);
                status = 'hold';
              } -->
          }
        }
        annotator.hit_menuitem = false;
        return true;
      });
      $(window).mousemove(function(e) {
        switch (status) {
          case 'hold':
            selector.update_rectangle(e.pageX, e.pageY);
        }
        return true;
      });
      $(window).mouseup(function(e) {
        switch (status) {
          case 'hold':
            selector.update_rectangle(e.pageX, e.pageY);
            selector.input_label(options);
            status = 'input';
            if (options.input_method === 'fixed') {
              selector.get_input_element().blur();
            }
        }
        return true;
      });
      selector.get_input_element().blur(function(e) {
        var data;
        switch (status) {
          case 'input':
            data = selector.finish(options);
            if (data.label) {
              annotator.add_entry(data);
              if (annotator.onchange) {
                annotator.onchange(annotator.entries);
              }
            }
            status = 'free';
        }
        return true;
      });
      selector.get_input_element().keypress(function(e) {
        switch (status) {
          case 'input':
            if (e.which === 13) {
              selector.get_input_element().blur();
            }
        }
        return e.which !== 13;
      });
      selector.get_input_element().mousedown(function(e) {
        return annotator.hit_menuitem = true;
      });
      selector.get_input_element().mousemove(function(e) {
        return annotator.hit_menuitem = true;
      });
      selector.get_input_element().mouseup(function(e) {
        return annotator.hit_menuitem = true;
      });
      return selector.get_input_element().parent().mousedown(function(e) {
        return annotator.hit_menuitem = true;
      });
    };

BBoxAnnotator.prototype.add_entry = function(entry) {
    var annotator, box_element, close_button, text_box;

    this.entries.push(entry);
      
    box_element = $('<div class="annotated_bounding_box"></div>');
    box_element.appendTo(this.image_frame).css({
        "border": this.border_width + "px solid " + entry.color,
        "position": "absolute",
        "top": (entry.top - this.border_width) + "px",
        "left": (entry.left - this.border_width) + "px",
        "width": entry.width + "px",
        "height": entry.height + "px",
        "color": entry.color,
        "font-family": "monospace",
        "font-size": "small"
    });
    close_button = $('<div></div>').appendTo(box_element).css({
        "position": "absolute",
        "top": "-8px",
        "right": "-8px",
        "width": "16px",
        "height": "0",
        "padding": "16px 0 0 0",
        "overflow": "hidden",
        "color": "#fff",
        "background-color": "#030",
        "border": "2px solid #fff",
        "-moz-border-radius": "18px",
        "-webkit-border-radius": "18px",
        "border-radius": "18px",
        "cursor": "pointer",
        "-moz-user-select": "none",
        "-webkit-user-select": "none",
        "user-select": "none",
        "text-align": "center"
    });
    var display;
    if (this.functionality == "scale_bar") {
        display = "none";
    } else {
        display = "block"
    }
    $("<div class='display_text'></div>").appendTo(close_button).html('×').css({
        "display": display,
        "text-align": "center",
        "width": "16px",
        "position": "absolute",
        "top": "-2px",
        "left": "0",
        "font-size": "16px",
        "line-height": "16px",
        "font-family": '"Helvetica Neue", Consolas, Verdana, Tahoma, Calibri, ' + 'Helvetica, Menlo, "Droid Sans", sans-serif'
    });
    text_box = $('<div class="display_text"></div>').appendTo(box_element).css({
        "overflow": "hidden"
    });
    if (this.show_label) {
        text_box.text(entry.label);
    }
    annotator = this;
    box_element.hover((function(e) {
        return close_button.show();
    }), (function(e) {
        return close_button.hide();
    }));
    close_button.mousedown(function(e) {
        return annotator.hit_menuitem = true;
    });
    close_button.click(function(e) {
        var clicked_box, index;
        clicked_box = close_button.parent(".annotated_bounding_box");
        index = clicked_box.prevAll(".annotated_bounding_box").length;
        clicked_box.detach();
        annotator.entries.splice(index, 1);
        return annotator.onchange(annotator.entries);
    });
	
	// functions used to click and drag boxes 
    box_element.mousedown(function(e) {
		// selects if you click near the border of a box
        x = Math.min(Math.max(Math.round(e.pageX - annotator.selector.image_frame.offset().left), 0), Math.round(annotator.selector.image_frame.width() - 1));
        y = Math.min(Math.max(Math.round(e.pageY - annotator.selector.image_frame.offset().top), 0), Math.round(annotator.selector.image_frame.height() - 1));
        if((Math.abs(x - entry.left) < 2 && y <= entry.top + entry.height && y >= entry.top) ||
           (Math.abs(x - (entry.left + entry.width)) < 2 && y <= entry.top + entry.height && y >= entry.top) ||
           (Math.abs(y - (entry.top + entry.height)) < 2 && x <= entry.left + entry.width && x >= entry.left) ||
           (Math.abs(y - entry.top) < 2 && x <= entry.left + entry.width && x >= entry.left)) {
			function move(e) {
				// creates new box to move with cursor as cursor moves
                moveX = e.pageX - x_start;
                moveY = e.pageY - y_start;
                box_element.css({
                    "border": annotator.border_width + "px solid " + entry.color,
                    "position": "absolute",
                    "top": (entry.top - annotator.border_width + moveY) + "px",
                    "left": (entry.left - annotator.border_width + moveX) + "px",
                    "width": entry.width + "px",
                    "height": entry.height + "px",
                    "color": entry.color,
                    "font-family": "monospace",
                    "font-size": "small"
                });
            }
            function up(e) {
				// binds the box to the window when the mouse is released
                $(window).unbind("mousemove", move);
                finalX = e.pageX - x_start;
                finalY = e.pageY - y_start;
                
                entry.top = entry.top +  finalY;
                entry.left = entry.left + finalX;

                index = box_element.prevAll(".annotated_bounding_box").length;
                box_element.detach();
                annotator.entries.splice(index, 1);
                
                annotator.onchange(annotator.entries);
                annotator.add_entry(entry);
                $(window).unbind("mouseup", up);
            }
            
            var index;
            x_start = e.pageX;
            y_start = e.pageY;
            $(window).mousemove(move);
            $(window).mouseup(up);
        }

            
    });
    return close_button.hide();
    };

BBoxAnnotator.prototype.clear_all = function(e) {
      $(".annotated_bounding_box").detach();
      this.entries.splice(0);
      return this.onchange(this.entries);
    };
	
BBoxAnnotator.prototype.change_selector = function(functionality) {
    // Changes the type of selector depending on the selected functionality
	var new_input;
	var new_labels;
	var color;
	
	switch (functionality) {
		case 'master':
			new_input = 'select';
			new_labels = ['Parent', 'Microscopy', 'Diffraction', 'Graph', 'Illustration', 'Basic Photo', 'Unclear'];
			color = "rgb(255,0,0)";
			break;
		case 'dependent':
			new_input = 'select';
			new_labels = ['Microscopy', 'Diffraction', 'Graph', 'Illustration', 'Basic Photo', 'Unclear'];
			color = "rgb(0,0,255)";
			break;
		case 'inset':
			new_input = 'select';
			new_labels = ['Microscopy', 'Diffraction', 'Graph', 'Illustration', 'Basic Photo', 'Unclear'];
			color = "rgb(153,0,255)";
			break;
		case 'subfigure_label':
			new_input = 'text';
			new_labels = [];
			color = "rgb(0,167,0)";
			break;
		case 'scale_bar_label':
			new_input = 'text';
			new_labels = [];
			color = "rgb(255,255,0)";
			break;
		case 'scale_bar':
			new_input = 'fixed';
			new_labels = ['scale_bar'];
			color = "rgb(255,153,0)";
			break;
	}
			
		
    var options = {
		url: "${image_url}", //PLACEHOLDER
		input_method: new_input, 
		labels: new_labels, 
		functionality: functionality,
		color: color,
		onchange: function(entries) {
			$("#annotation_data").val(JSON.stringify(entries));
			if (entries.length > 0 &&
			    assignment_id != "" &&
		        assignment_id != "ASSIGNMENT_ID_NOT_AVAILABLE" &&
		        $('input[type="checkbox"]').is(":checked")) {
				$("#submitButton").removeAttr("disabled");
			} else {
				$("#submitButton").attr("disabled", "disabled");
			}
	    }
	}

	this.selector.create_label_box(options);
	this.selector.selector.css({
        "border": this.border_width + "px dotted rgb(0,0,0)",
        "position": "absolute"
      });
    this.color = color;
	this.initialize_events(this.selector, options);
    };

return BBoxAnnotator;

})();

}).call(this);

// Main entry point. Use a placeholder for image urls.
$(document).ready(function() {
  var assignment_id = turkGetParam('assignmentId', "");
  // Initialize the bounding-box annotator.
  var annotator = new BBoxAnnotator({
    url: "https://drive.google.com/uc?id=11qv58ImehScb_s_TxxHutm5ut-vyfPSr", //PLACEHOLDER
    //url: "${image_url}",
	input_method : 'select',
	labels : ['Parent', 'Microscopy', 'Diffraction', 'Graph', 'Illustration', 'Basic Photo', 'Unclear'],
	color : "rgb(255,0,0)",
	functionality : "master",
    onchange: function(entries) {
      $("#annotation_data").val(JSON.stringify(entries));
      if (entries.length > 0 &&
          assignment_id != "" &&
          assignment_id != "ASSIGNMENT_ID_NOT_AVAILABLE" &&
          $('input[type="checkbox"]').is(":checked")) {
        $("#submitButton").removeAttr("disabled");
      }
      else {
        $("#submitButton").attr("disabled", "disabled");
      }
    }
  });


<<<<<<< HEAD
  
  
=======
  // functions to respond to click events on buttons
>>>>>>> d746017... Added user agreement checkbox and shorter instructions to mturk layout
  document.getElementById("master").onclick = function() { annotator.change_selector('master') }
  document.getElementById("dependent").onclick = function() { annotator.change_selector('dependent') }
  document.getElementById("inset").onclick = function() { annotator.change_selector('inset') }
  document.getElementById("subfigure_label").onclick = function() { annotator.change_selector('subfigure_label') }
  document.getElementById("scale_bar_label").onclick = function() { annotator.change_selector('scale_bar_label') }
  document.getElementById("scale_bar").onclick = function() { annotator.change_selector('scale_bar') }
  
  // allowing submission
  document.getElementById("agreement").onclick = function() {
        if (annotator.entries.length > 0 &&
          assignment_id != "" &&
          assignment_id != "ASSIGNMENT_ID_NOT_AVAILABLE" &&
          $( "input:checked" ).length > 0) {
            
            $("#submitButton").removeAttr("disabled");
      }
      else {
            $("#submitButton").attr("disabled", "disabled");
      }
  }
  
  document.getElementById("hide_labels").onclick = function() { 
      var elts = document.getElementsByClassName("display_text")
      for (var elt = 0; elt < elts.length; elt++) {
        elts[elt].style.display = "none"; 
      }
  }
  document.getElementById("show_labels").onclick = function() { 
      var elts = document.getElementsByClassName("display_text")
      for (var elt = 0; elt < elts.length; elt++) {
        elts[elt].style.display = "block"; 
      }
  }
    document.getElementById("hide_boxes").onclick = function() { 
      var elts = document.getElementsByClassName("annotated_bounding_box")
      for (var elt = 0; elt < elts.length; elt++) {
        elts[elt].style.display = "none"; 
      }
  }
  document.getElementById("show_boxes").onclick = function() { 
      var elts = document.getElementsByClassName("annotated_bounding_box")
      for (var elt = 0; elt < elts.length; elt++) {
        elts[elt].style.display = "block"; 
      }
  }
  
  // Initialize the reset button.
  $("#reset_button").click(function(e) {
    annotator.clear_all();
  });
  // Disable the submission at the beginning.
  $("#submitButton").attr("disabled", "disabled");
  $("#submitButton").detach().appendTo("#button_paragraph");
  if (assignment_id == "ASSIGNMENT_ID_NOT_AVAILABLE") {
    $("#submitButton").val("This is preview");
  }
});



</script>
